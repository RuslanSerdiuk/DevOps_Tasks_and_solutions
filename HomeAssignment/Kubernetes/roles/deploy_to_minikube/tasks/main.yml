
- name: Create a k8s namespace
  kubernetes.core.k8s:
    name: nginx
    api_version: v1
    kind: Namespace
    state: present
    kubeconfig: "/home/ubuntu/.kube/config"

- name: Create nginx deployment
  k8s:
        definition:
          apiVersion: apps/v1
          kind: Deployment
          metadata:
            name: nginx-deployment
            namespace: nginx
          spec:
            replicas: 1
            selector:
              matchLabels:
                app: nginx
            template:
              metadata:
                labels:
                  app: nginx
              spec:
                containers:
                  - name: nginx
                    image: nginx:latest
                    ports:
                      - containerPort: 80
        state: present
        kubeconfig: "/home/ubuntu/.kube/config"

- name: Create nginx service
  k8s:
        definition:
          apiVersion: v1
          kind: Service
          metadata:
            name: nginx-service
            namespace: nginx
          spec:
            selector:
              app: nginx
            ports:
              - name: http
                port: 80
                targetPort: 80
          type: NodePort
        state: present
        kubeconfig: "/home/ubuntu/.kube/config"




- name: Create a k8s namespace for Jenkins
  kubernetes.core.k8s:
    name: jenkins
    api_version: v1
    kind: Namespace
    state: present
    kubeconfig: "/home/ubuntu/.kube/config"

- name: Create a Cluster Role
  k8s:
      state: present
      kubeconfig: "/home/ubuntu/.kube/config"
      definition:
        apiVersion: rbac.authorization.k8s.io/v1
        kind: ClusterRole
        metadata:
          name: jenkins-admin
        rules:
          - apiGroups: [""]
            resources: ["*"]
            verbs: ["*"]

- name: Create a service account
  k8s:
      state: present
      kubeconfig: "/home/ubuntu/.kube/config"
      definition:
        apiVersion: v1
        kind: ServiceAccount
        metadata:
          name: jenkins-admin
          namespace: jenkins

- name: Create a Cluster Role Binding
  k8s:
      state: present
      kubeconfig: "/home/ubuntu/.kube/config"
      definition:
        apiVersion: rbac.authorization.k8s.io/v1
        kind: ClusterRoleBinding
        metadata:
          name: jenkins-admin
        roleRef:
          apiGroup: rbac.authorization.k8s.io
          kind: ClusterRole
          name: jenkins-admin
        subjects:
        - kind: ServiceAccount
          name: jenkins-admin
          namespace: jenkins

- name: Create Storage Class
  k8s:
      state: present
      kubeconfig: "/home/ubuntu/.kube/config"
      definition:
        kind: StorageClass
        apiVersion: storage.k8s.io/v1
        metadata:
          name: local-storage
        provisioner: kubernetes.io/no-provisioner
        volumeBindingMode: WaitForFirstConsumer

- name: Create a Persistent Volume
  k8s:
      state: present
      kubeconfig: "/home/ubuntu/.kube/config"
      definition:
        apiVersion: v1
        kind: PersistentVolume
        metadata:
          name: jenkins-pv-volume
          labels:
            type: local
        spec:
          storageClassName: local-storage
          claimRef:
            name: jenkins-pv-claim
            namespace: jenkins
          capacity:
            storage: 10Gi
          accessModes:
            - ReadWriteOnce
          local:
            path: /mnt
          nodeAffinity:
            required:
              nodeSelectorTerms:
              - matchExpressions:
                - key: kubernetes.io/hostname
                  operator: In
                  values:
                  - minikube

- name: Create a Persistent Volume Claim
  k8s:
      state: present
      kubeconfig: "/home/ubuntu/.kube/config"
      definition:
        apiVersion: v1
        kind: PersistentVolumeClaim
        metadata:
          name: jenkins-pv-claim
          namespace: jenkins
        spec:
          storageClassName: local-storage
          accessModes:
            - ReadWriteOnce
          resources:
            requests:
              storage: 3Gi

- name: Deployment Jenkins
  k8s:
      state: present
      kubeconfig: "/home/ubuntu/.kube/config"
      definition:
        apiVersion: apps/v1
        kind: Deployment
        metadata:
          name: jenkins
          namespace: jenkins
        spec:
          replicas: 1
          selector:
            matchLabels:
              app: jenkins-server
          template:
            metadata:
              labels:
                app: jenkins-server
            spec:
              securityContext:
                    fsGroup: 1000
                    runAsUser: 1000
              serviceAccountName: jenkins-admin
              containers:
                - name: jenkins
                  image: jenkins/jenkins:lts
                  resources:
                    limits:
                      memory: "600Mi"
                      cpu: "900m"
                    requests:
                      memory: "500Mi"
                      cpu: "500m"
                  ports:
                    - name: httpport
                      containerPort: 8080
                    - name: jnlpport
                      containerPort: 50000
                  livenessProbe:
                    httpGet:
                      path: "/login"
                      port: 8080
                    initialDelaySeconds: 90
                    periodSeconds: 10
                    timeoutSeconds: 5
                    failureThreshold: 5
                  readinessProbe:
                    httpGet:
                      path: "/login"
                      port: 8080
                    initialDelaySeconds: 60
                    periodSeconds: 10
                    timeoutSeconds: 5
                    failureThreshold: 3
                  volumeMounts:
                    - name: jenkins-data
                      mountPath: /var/jenkins_home
              volumes:
                - name: jenkins-data
                  persistentVolumeClaim:
                      claimName: jenkins-pv-claim

- name: Expose Jenkins as a service
  k8s:
      state: present
      kubeconfig: "/home/ubuntu/.kube/config"
      definition:
        apiVersion: v1
        kind: Service
        metadata:
          name: jenkins-service
          namespace: jenkins
          annotations:
              prometheus.io/scrape: 'true'
              prometheus.io/path:   /
              prometheus.io/port:   '8080'
        spec:
          selector:
            app: jenkins-server
          type: NodePort
          ports:
            - port: 8080
              targetPort: 8080
              nodePort: 32000



- name: Create a k8s namespace for Redis
  kubernetes.core.k8s:
    name: redis
    api_version: v1
    kind: Namespace
    state: present
    kubeconfig: "/home/ubuntu/.kube/config"

- name: Deploy Redis
  k8s:
      state: present
      kubeconfig: "/home/ubuntu/.kube/config"
      definition:
        apiVersion: apps/v1
        kind: Deployment
        metadata:
          name: redis-deployment
          namespace: redis
        spec:
          replicas: 1
          selector:
            matchLabels:
              app: redis
          template:
            metadata:
              labels:
                app: redis
            spec:
              containers:
              - name: redis
                image: "{{ redis_image }}"
                ports:
                - containerPort: "{{ redis_port }}"

- name: Expose Redis as a service
  k8s:
      state: present
      kubeconfig: "/home/ubuntu/.kube/config"
      definition:
        apiVersion: v1
        kind: Service
        metadata:
          name: redis-service
          namespace: redis
        spec:
          selector:
            app: redis
          type: NodePort
          ports:
            - name: redis
              port: "{{ redis_port }}"
              targetPort: "{{ redis_port }}"
              nodePort: 30001



- name: Block communication between pods
  k8s:
      state: present
      kubeconfig: "/home/ubuntu/.kube/config"
      definition:
        apiVersion: networking.k8s.io/v1
        kind: NetworkPolicy
        metadata:
          name: deny-all
          namespace: redis
        spec:
          podSelector: {}
          policyTypes:
          - Ingress
          ingress: []