pipeline {
    agent {
        label 'ec2-agent'
    }
    options {
        buildDiscarder(logRotator(numToKeepStr: '5'))
    }
    environment {
        ECR_CREDENTIALS = credentials('ecr-creds')
    }
    stages {
        stage('Delete workspace before build starts') {
            steps {
                echo 'Deleting workspace'
                deleteDir()
            }
        }
        stage('Checkout') {
            steps{
                git branch: "Jenkins-Setup-Configure", credentialsId: 'github-creds-jenkins-task', url: 'https://github.com/RuslanSerdiuk/DevOps_Tasks_and_solutions.git'
                }
        }
        stage('Deploy Lambda') {
            steps {
                script {
                    STACK_STATUS = sh (
                            script: 'aws cloudformation create-stack --stack-name jenkins-lambda --template-body file://CICD/Jenkins-Setup-configure/lambda-template.yaml',
                            returnStdout: true
                        ).trim()
                         if ("An error occurred (AlreadyExistsException) when calling the CreateStack operation: Stack [jenkins-lambda] already exists" == $STACK_STATUS) {
                        sh 'aws cloudformation delete-stack --stack-name jenkins-lambda'
                        sleep time: 40, unit: 'SECONDS'
                        sh 'aws cloudformation create-stack --stack-name jenkins-lambda --template-body file://CICD/Jenkins-Setup-configure/lambda-template.yaml'
                         }
                        echo "Stack has been RECREATED!"
                    }
            }
        }
        stage('Invoke Lambda - Type:Event') {
            steps {
                script {
                    RESPONCE = sh (
                            script: 'aws lambda invoke --invocation-type Event --function-name JenkinsTask --payload $(echo \'{"first_name": "Ruslan", "last_name": "Serdiuk"}\' | base64) out | awk \'{print $2}\'',
                            returnStdout: true
                        ).trim()
                        echo "Lambda responce code: ${RESPONCE}"
                    }
                sh 'aws lambda invoke --invocation-type Event --function-name JenkinsTask --cli-binary-format raw-in-base64-out --payload file://CICD/Jenkins-Setup-configure/payloadfile.json response.json | awk \'{print $2}\''
            }
        }
        stage('Invoke Lambda - Type:RequestResponse') {
            steps {
                sh 'aws lambda invoke --invocation-type RequestResponse --function-name JenkinsTask --payload $(echo \'{"first_name": "Ruslan", "last_name": "Serdiuk"}\' | base64) out'
                sh 'aws lambda invoke --invocation-type RequestResponse --function-name JenkinsTask --cli-binary-format raw-in-base64-out --payload file://CICD/Jenkins-Setup-configure/payloadfile.json response.json'
            }
        }
        stage('Ls work dir') {
            steps {
                sh "ls -la"
            }
        }

    }
}